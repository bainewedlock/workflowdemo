@page
@model WorkerDemo.Pages.Workflows.EditModel

@{
    ViewData["Title"] = "Edit";
}

<h1>
    <a class="btn btn-secondary" asp-page="./Index">back</a>
    Workflow Instance
</h1>

<div>
    <hr />
    <dl class="row">
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Workflow.InstanceId)
        </dt>
        <dd class="col-sm-9">
            @Html.DisplayFor(model => model.Workflow.InstanceId)
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Workflow.WorkflowDefinitionId)
        </dt>
        <dd class="col-sm-9">
            @Html.DisplayFor(model => model.Workflow.WorkflowDefinitionId)
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Workflow.Version)
        </dt>
        <dd class="col-sm-9">
            @Html.DisplayFor(model => model.Workflow.Version)
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Workflow.CreateTime)
        </dt>
        <dd class="col-sm-9">
            @Html.DisplayFor(model => model.Workflow.CreateTime)
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Workflow.CompleteTime)
        </dt>
        <dd class="col-sm-9">
            <span id="wf_complete_time"></span>
        </dd>
        <dt class="col-sm-3">
            @Html.DisplayNameFor(model => model.Workflow.Status)
        </dt>
        <dd class="col-sm-9">
            @await Html.PartialAsync("_WorkflowStatusPartial", Model.Workflow.Status)
        </dd>
    </dl>
</div>
<div>

@if (Model.Errors.Any())
{
    <h2>Errors</h2>
    <table class="table">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Errors[0].ErrorTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Errors[0].Message)
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Errors)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.ErrorTime)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Message)
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

    <div class="container bg-info-subtle">
        <table id="log" class="table caption-top table-sm">
            <caption>Log</caption>
            <thead>
                <tr>
                    <td scope="col" class="col-2">Date</td>
                    <td scope="col" class="col-2">Context</td>
                    <td scope="col" class="col-8">Message</td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td id="empty_log" colspan="4">(empty)</td>
                </tr>
            </tbody>
        </table>
    </div>

    <div>
        <button style="visibility: hidden;" id="resume_btn" class="btn btn-info" onclick="resume_workflow();">Resume</button>
    </div>

    <input id="workflow_id" type="hidden" value="@Model.Workflow.InstanceId" /> 

    <script src="~/js/signalr/dist/browser/signalr.js"></script>

    <script type="text/javascript">
"use strict";

var connection = new signalR.HubConnectionBuilder()
    .withUrl('/walzworkflowhub')
    .withAutomaticReconnect()
    .build();

function get_workflow_id() {
    return document.querySelector('#workflow_id').value;
}

connection.start().then(function () {
    connection.invoke('ClientJoin', get_workflow_id()).catch(function (err) {
        return console.error(err.toString());
    });
}).catch(function (err) {
    return console.error(err.toString());
});

function resume_workflow() {
    document.getElementById("resume_btn").style.visibility = "hidden";
    connection.invoke("Resume", get_workflow_id()).catch(function (err) {
        return console.error(err.toString());
    });
}

connection.on("WorkflowState", function (data) {
    console.log("workflowstate", data);
    var visible_1 = data.can_resume ? "visible" : "hidden";
    document.getElementById("resume_btn").style.visibility = visible_1;
    document.getElementById("wf_status").innerHTML = data.status;
    document.getElementById("wf_complete_time").innerHTML = data.complete_time;
});

connection.on("Log", function (data) {
    if(document.getElementById("empty_log"))
        document.getElementById("empty_log").remove();
    var t = document.getElementById("log");
    var row = t.insertRow(1);
    row.insertCell(0).innerHTML = data.timestamp;
    row.insertCell(1).innerHTML = data.context;
    row.insertCell(2).innerHTML = data.message;
});
    </script>
