@page
@model WorkerDemo.Pages.Workflows.EditModel

@{
    ViewData["Title"] = "Edit";
}


<p>
    <a class="btn btn-secondary d-inline" asp-page="./Index">back</a>
</p>
<h1>
    Workflow Instance
</h1>

<p>
    <div class="card">
        <div class="card-header text-muted">
            <span class="wwf-definition">
                @Html.DisplayFor(model => model.Workflow.WorkflowDefinitionId)
            </span>
            <span class="wwf-instance">
                @Html.DisplayFor(model => model.Workflow.InstanceId)
            </span>
        </div>
        <dl class="row card-body">
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Workflow.CreateTime)
            </dt>
            <dd class="col-sm-10">
                <span class="wwf-timestamp">
                    @Html.DisplayFor(model => model.Workflow.CreateTime)
                </span>
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Workflow.CompleteTime)
            </dt>
            <dd class="col-sm-10">
                <span class="wwf-timestamp">
                    <span id="wf_complete_time">&nbsp;</span>
                </span>
            </dd>
            <dt class="col-sm-2">
                @Html.DisplayNameFor(model => model.Workflow.Status)
            </dt>
            <dd class="col-sm-10 wwf-status-container">
                <span id="wf_status0" class="wwf-status">
                    @await Html.PartialAsync("_WorkflowStatusPartial", 0)</span>
                <span id="wf_status1" class="wwf-status">
                    @await Html.PartialAsync("_WorkflowStatusPartial", 1)</span>
                <span id="wf_status2" class="wwf-status">
                    @await Html.PartialAsync("_WorkflowStatusPartial", 2)</span>
                <button id="resume_btn" class="btn btn-info wwf-resume"
                onclick="resume_workflow();">Resume</button>
            </dd>
        </dl>
    </div>
</p>

<table id="log" class="table">
    <thead>
        <tr>
            <td scope="col" class="col-3">Date</td>
            <td scope="col" class="col-2">Context</td>
            <td scope="col" class="col-7">Message</td>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td id="empty_log" colspan="4">(no logs)</td>
        </tr>
    </tbody>
</table>

<input id="workflow_id" type="hidden" value="@Model.Workflow.InstanceId" /> 

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script type="text/javascript">
"use strict";

var connection = new signalR.HubConnectionBuilder()
    .withUrl('/walzworkflowhub')
    .withAutomaticReconnect()
    .build();

function get_workflow_id() {
    return document.querySelector('#workflow_id').value;
}

connection.start().then(function () {
    connection.invoke('ClientJoin', get_workflow_id()).catch(function (err) {
        return console.error(err.toString());
    });
}).catch(function (err) {
    return console.error(err.toString());
});

function resume_workflow() {
    document.getElementById("resume_btn").style.visibility = "hidden";
    connection.invoke("Resume", get_workflow_id()).catch(function (err) {
        return console.error(err.toString());
    });
}

function show(id, toggle) {
    document.getElementById(id).style.visibility =
        toggle ? "visible" : "collapse";
}

var $ = function( id ) { return document.getElementById( id ); };

function add_log(entry) {
    if ($("empty_log"))
        $("empty_log").remove();
    var row = $("log").insertRow(1);
    row.insertCell(0).innerHTML = entry.time;
    row.insertCell(1).innerHTML = entry.context;
    row.insertCell(2).innerHTML = entry.message;
}

connection.on("WorkflowState", function (data) {
console.log(data)
    var visible_1 = data.can_resume ? "visible" : "hidden";
    $("resume_btn").style.visibility = visible_1;
    $("wf_complete_time").innerHTML = data.complete_time;
    show("wf_status0", data.status == 0);
    show("wf_status1", data.status == 1);
    show("wf_status2", data.status == 2);
    if (data.log) data.log.forEach(add_log);
});

connection.on("Log", function (data) {
    add_log(data.add_log);
});

</script>
